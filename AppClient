import java.net.*;
import java.io.*;
import java.util.*;

import javax.swing.*;



public class AppClient {
	public Socket socket;
	JTextField tf;
	JTextArea ta1;
	JTextArea ta2;
	public Thread sender;
	public Thread receiver;
	

	public AppClient(String name, JTextField tf, JTextArea ta1, JTextArea ta2) {
		this.tf = tf;
		this.ta1 = ta1;
		this.ta2 = ta2;
		try {
			socket = new Socket("localhost", 7777);
			System.out.println("서버에 연결되었습니다.");
			sender = new Thread(new ClientSender(socket, name));
			receiver = new Thread(new ClientReceiver(socket));
			sender.start();
			receiver.start();
		} catch (Exception e) {
			JOptionPane.showMessageDialog(new JFrame(), "채팅방 서버가 닫혀있습니다.");		//서버와 연결 실패시 알림창 띄우기
		}
	}
	
	//클라이언트로 메시지를 뿌리기 위한 클래스
	class ClientSender extends Thread {
		Socket socket;
		DataOutputStream out;
		String name;
		
		ClientSender(Socket socket, String name) {
			this.socket = socket;
			try {
				out = new DataOutputStream(socket.getOutputStream());
				this.name = name;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		public void run() {
			try {
				if (out != null) {
					out.writeUTF(name);		//이름을 출력
				}
				while (out != null)
					if (Chat.msg.equals("") == false) {
						out.writeUTF(name + ": " + Chat.msg);	//채팅을 출력
						out.flush();
						Chat.msg = "";	//채팅을 출력 후에 비워줌

					} else {
						this.yield();	//메시지가 가 입력되지않으면 스레드를 대기상태로 만들고 다른 스레드에게 주도권을 준다.
					}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	class ClientReceiver extends Thread {
		Socket socket;
		public DataInputStream in;

		ClientReceiver(Socket socket) {
			this.socket = socket;
			try {
				in = new DataInputStream(socket.getInputStream());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		public void run() {
			while (in != null) {

				try {
					if (!Thread.currentThread().isInterrupted()) {	// 클라이언트가 연결 되어있는지
						String kind = in.readUTF();	//데이터 입력을 받아서 kind에 대입
						StringTokenizer tokenIn;	//문자열을 나누기 위한 StringTokenizer
						StringTokenizer tokenOut;

						if (kind.contains("[join];")) {
							tokenIn = new StringTokenizer(kind, ";");	// ;를 기준으로 토큰을 나눔
							tokenIn.nextToken();	//[join] 부분을 버림
							String join = tokenIn.nextToken();
							if (!ta2.getText().contains(join)) {
								ta2.append(join + "\n");
							}
						} else if (kind.contains("[exit];")) {
							tokenOut = new StringTokenizer(kind, ";");
							if (tokenOut.nextToken().contains("0")) {
								ta2.setText("");
							}
							String out = tokenOut.nextToken();

							if (!ta2.getText().contains(out)) {
								ta2.append(out + "\n");

							}

						} else {
							ta1.append(kind + "\n");
							ta1.setCaretPosition(ta1.getDocument().getLength());	//스크롤 맨밑에 문자를 추가
						}
					} else {
						break;
					}
				} catch (IOException e) {
					// 소켓이 닫혀서 오류 메시지가 나기때문에 무시한다.
				}
			}
		}
	}

}
